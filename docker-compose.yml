version: '3.8'

services:
  web:

    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  db:
    image: postgres:alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery_worker:
    build: .
    image: ${COMPOSE_PROJECT_NAME:-diplom}_web
    command: celery -A netology_pd_diplom worker -l info --concurrency=2
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
      - db
    networks:
      - app-network
    restart: unless-stopped

  celery_beat:
    build: .
    image: ${COMPOSE_PROJECT_NAME:-diplom}_web
    command: celery -A netology_pd_diplom beat -l info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
      - db
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: